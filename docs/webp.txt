-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bidings to libwebp
--   
--   Haskell bindings to libwebp, providing support for encoding/decoding
--   of images in WebP format in Haskell.
@package webp
@version 0.1.0.0

module WebP.Types

-- | Represents width of an image.
newtype Width
Width :: Int -> Width

-- | Represents height of an image.
newtype Height
Height :: Int -> Height

-- | Represents quality to be used in encoding operations. Valid ranges are
--   between 0 and 100.
newtype Quality
Quality :: Float -> Quality
instance GHC.Show.Show WebP.Types.InputFormat
instance GHC.Classes.Eq WebP.Types.InputFormat
instance GHC.Show.Show WebP.Types.Quality
instance GHC.Classes.Ord WebP.Types.Quality
instance GHC.Num.Num WebP.Types.Quality
instance GHC.Classes.Eq WebP.Types.Quality
instance GHC.Show.Show WebP.Types.Height
instance GHC.Classes.Ord WebP.Types.Height
instance GHC.Num.Num WebP.Types.Height
instance GHC.Classes.Eq WebP.Types.Height
instance GHC.Show.Show WebP.Types.Width
instance GHC.Classes.Ord WebP.Types.Width
instance GHC.Num.Num WebP.Types.Width
instance GHC.Classes.Eq WebP.Types.Width


-- | WebP decoding and encoding functions.
--   
--   The inputs of encoding functions and outputs of decoding functions are
--   arrays of bytes representing pixels, with one byte per channel.
--   
--   For example functions operating on arrays in RGB layout expect them to
--   be in the following format:
--   
--   <pre>
--   import qualified Data.ByteString as Bytes
--   import Data.Word
--   
--   Bytes.pack ([r, g, b, r, g, b, ..] :: Word8)
--   </pre>
module WebP

-- | Deocde an array of bytes in RGB layout.
decodeRGB :: ByteString -> ByteString

-- | Deocde an array of bytes in BGR layout.
decodeBGR :: ByteString -> ByteString

-- | Deocde an array of bytes in RGBA layout.
decodeRGBA :: ByteString -> ByteString

-- | Deocde an array of bytes in BGRA layout.
decodeBGRA :: ByteString -> ByteString

-- | Validate the WebP image header and retrieve the image width and
--   height.
getInfo :: ByteString -> Maybe (Width, Height)

-- | Represents width of an image.
newtype Width
Width :: Int -> Width

-- | Represents height of an image.
newtype Height
Height :: Int -> Height

-- | Represents quality to be used in encoding operations. Valid ranges are
--   between 0 and 100.
newtype Quality
Quality :: Float -> Quality

-- | Encode an array of bytes in RGB layout at the specified width, height
--   and quality. Quality ranges from 0 to 100. The value 0 corresponds to
--   low quality and small output sizes, whereas 100 is the highest quality
--   and largest output size.
encodeRGB :: ByteString -> Width -> Height -> Quality -> ByteString

-- | Encode an array of bytes in BGR layout at the specified width, height
--   and quality. Quality ranges from 0 to 100. The value 0 corresponds to
--   low quality and small output sizes, whereas 100 is the highest quality
--   and largest output size.
encodeBGR :: ByteString -> Width -> Height -> Quality -> ByteString

-- | Encode an array of bytes in RGBA layout at the specified width, height
--   and quality. Quality ranges from 0 to 100. The value 0 corresponds to
--   low quality and small output sizes, whereas 100 is the highest quality
--   and largest output size.
encodeRGBA :: ByteString -> Width -> Height -> Quality -> ByteString

-- | Encode an array of bytes in BGRA layout at the specified width, height
--   and quality. Quality ranges from 0 to 100. The value 0 corresponds to
--   low quality and small output sizes, whereas 100 is the highest quality
--   and largest output size.
encodeBGRA :: ByteString -> Width -> Height -> Quality -> ByteString

-- | Lossless variant of <a>encodeRGB</a>
losslessEncodeRGB :: ByteString -> Width -> Height -> ByteString

-- | Lossless variant of <a>encodeBGR</a>
losslessEncodeBGR :: ByteString -> Width -> Height -> ByteString

-- | Lossless variant of <a>encodeRGBA</a>
losslessEncodeRGBA :: ByteString -> Width -> Height -> ByteString

-- | Lossless variant of <a>encodeBGRA</a>
losslessEncodeBGRA :: ByteString -> Width -> Height -> ByteString
